#!/usr/bin/env node
/*
 * LiskHQ/lisk-commander
 * Copyright © 2017–2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var os = require('os');
var lockfile = require('lockfile');
var semver = require('semver');
var packageJSON = require('../package.json');

var configLockfilePath;
var liskCommander;
var execFile;
var firstCommandWords;
var nonInteractiveLiskCommanderArg = process.argv[1];
var nonInteractiveCommandArg = process.argv[2];
var nonInteractiveOptions;
var commandArgIsFilePath = false;

process.env.LISK_COMMANDER_CONFIG_DIR = process.env.LISK_COMMANDER_CONFIG_DIR || `${os.homedir()}/.lisk-commander`;
configLockfilePath = `${process.env.LISK_COMMANDER_CONFIG_DIR}/config.lock`;

process.env.NON_INTERACTIVE_MODE = !(nonInteractiveLiskCommanderArg.endsWith('lisk') && process.argv.length === 2);

function exit(code) {
	process.exit(code || 0);
}

if (!semver.satisfies(process.version, packageJSON.engines.node)) {
	console.error('\x1b[31m', `ERROR: Requires Node.js version ${packageJSON.engines.node}, but was started with version ${semver.clean(process.version)}.`, '\x1b[0m');
	exit();
}

// eslint-disable-next-line default-case
switch (process.argv[2]) {
case 'clean':
	console.warn('\x1b[33m', 'WARNING: Attempting to remove configuration lockfile. I hope you know what you’re doing.', '\x1b[0m');
	lockfile.unlockSync(configLockfilePath);
	exit();
	break;
case '--version':
case '-v':
	console.info(packageJSON.version);
	exit();
	break;
default:
	// continue...
}

liskCommander = require('../dist').default;
execFile = require('../dist/exec_file').default;

// eslint-disable-next-line no-underscore-dangle
firstCommandWords = liskCommander.commands.map(c => c._name.split(' ')[0]);

if (firstCommandWords.indexOf(nonInteractiveCommandArg) === -1) {
	commandArgIsFilePath = true;
	try {
		nonInteractiveOptions = process.argv.slice(3);
		execFile(liskCommander, nonInteractiveCommandArg, nonInteractiveOptions, exit);
	} catch (error) {
		commandArgIsFilePath = false;
	}
}

if (!commandArgIsFilePath) {
	module.exports = process.env.NON_INTERACTIVE_MODE === 'true'
		? (liskCommander.parse(process.argv))
		: liskCommander;
}
